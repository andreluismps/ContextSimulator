/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.logicalcontextsimulator.gui.panel.contextList;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;

import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.border.MatteBorder;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;

import com.logicalcontextsimulator.model.context.AbstractContext;
import com.logicalcontextsimulator.model.context.Scenario;
import com.logicalcontextsimulator.util.Constants;
/**
 *
 * @author MHL
 */
public class TimeLinePanel extends javax.swing.JPanel {

    /**
	 * 
	 */
	private static final long serialVersionUID = 6781553474591615277L;

	private Scenario scenario;
    
    private int itsRow, itsColumn;
    
    private Object currentObject;
 
    /**
     * Creates new form TimeLine
     */
    public TimeLinePanel(Scenario scenario) {
        this.scenario = scenario;

        initComponents();
       // jTable1.addMouseMotionListener((MouseMotionListener) new MyMouseAdapter());
        jTable1.setTableHeader(null);
        jTable1.setDefaultRenderer(Object.class, new AttributiveCellRenderer());
    }
    
    public JTable getTable(){
        return jTable1;
    }

    
    public class MyMouseAdapter extends MouseMotionAdapter {

        @Override
        public void mouseMoved(MouseEvent e)
        {

        }
        
        @Override
        public void mouseDragged(MouseEvent e) {

        }
    }
    
    class ConcreteTableModel extends AbstractTableModel{

        /**
		 * 
		 */
		private static final long serialVersionUID = 5808323202846649100L;

		@Override
        public int getRowCount() {
            return scenario.getMaxDepth()+ 1; //"+2", because of an empty line and the time
        }

        @Override
        public int getColumnCount() {
            return scenario.getContextList().size();
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            try{
                if(rowIndex>0)
                    return scenario.getContextList().get(columnIndex).getContextList().get(rowIndex-1);
                else
                    return null;
            }catch(java.lang.IndexOutOfBoundsException e){
                return null;
            }
        }
        
    }
    
    public class AttributiveCellRenderer extends JLabel implements TableCellRenderer {

      /**
		 * 
		 */
		private static final long serialVersionUID = 8592424433391390170L;

	public AttributiveCellRenderer() {
        setOpaque(true);
      }

      @Override
      public Component getTableCellRendererComponent(JTable table, Object value,
        boolean isSelected, boolean hasFocus, int row, int column) {
        
        this.setForeground(Color.BLACK);
        setHorizontalAlignment( JLabel.LEFT );
        setFont(new Font("Arial", Font.PLAIN, 11));
        
        if(value instanceof AbstractContext){
            this.setBackground(((AbstractContext) value).getBackgroundColor());
            
            this.setText(scenario.getContextList().get(column).getContextList().get(row-1).getTableRepresentation());

        }else if(row == 0){
            this.setBackground(new Color(25,55,95));
            this.setForeground(Color.WHITE);
            //Letzte Zeile enth√§lt die Zeit
            this.setText(String.valueOf(column));
            setHorizontalAlignment( JLabel.CENTER );
            setFont(new Font("Arial", Font.BOLD, 12));
        }else{
            this.setBackground(Color.WHITE);
            
            this.setText(Constants.EMPTY_STRING);
        }
        
        if(column==scenario.getCurrentTransmissionIndex()){
            setBorder(new MatteBorder(row==0?1:0, 1, (row==(scenario.getMaxDepth()))?1:0, 1, Color.RED) );
        }else{
            setBorder(new MatteBorder(0, 0, 0, 0, Color.RED) );
        }
        
        return this;
      }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.GridLayout(1, 1));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTable1.setModel(new ConcreteTableModel());
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
